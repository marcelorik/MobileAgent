import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.RMISecurityManager;
import java.rmi.server.UnicastRemoteObject;
import java.rmi.registry.*; 
import java.util.*;
 
public class Agencia 
    extends UnicastRemoteObject 
    implements AgenciaI {
        
    //Map dos serviços que a agência possui
    private HashMap<Integer , ServiceI> services;
    ServiceI genericService;
    
    public Agencia() throws RemoteException {
      super();
      //Agencia possui 1 ou mais serviços
      ServiceI service0 = new ServiceInformation(); 
      ServiceI service1 = new ServiceHello(); 
      this.services = new HashMap<Integer , ServiceI>();
      //Associando serviços a agencia ao ser criada
      this.services.put(service0.typeService(),service0);
      this.services.put(service1.typeService(),service1);
    }
    
    public void execute(int typeService) throws RemoteException 
    { 
      genericService = services.get(typeService);
      genericService.doService(); 
    }
    
    //Retorna tipos serviços oferecidos pela agência
    public String kindService() throws RemoteException{
	
	if(!services.isEmpty()) {
	  
	  String kind = "";//String com serviços
	  int i = 1; //token para virgula 
	  
	  Iterator it = services.entrySet().iterator();  
	  while (it.hasNext()) {
	  
	    Map.Entry entry = (Map.Entry)it.next();
	    //System.out.println(pairs.getKey() + " = " + pairs.getValue());
	    if(i<services.size())
	    kind += entry.getKey()+",";
	    else
	    kind += entry.getKey();
	    
	   // it.remove(); // avoids a ConcurrentModificationException
	    i++;
	  } 	  
	  return kind;
	} 
	 return null;	
    }
}
